// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: books.proto

package books

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BookService service

type BookService interface {
	// Gets a book by its ID.
	GetBookById(ctx context.Context, in *BookIdRequest, opts ...client.CallOption) (*Book, error)
	// Creates a new book.
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...client.CallOption) (*Book, error)
	// Updates an existing book.
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...client.CallOption) (*Book, error)
	// Deletes a book by its ID.
	DeleteBook(ctx context.Context, in *BookIdRequest, opts ...client.CallOption) (*DeleteBookResponse, error)
	// Lists all books.
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...client.CallOption) (*ListBooksResponse, error)
}

type bookService struct {
	c    client.Client
	name string
}

func NewBookService(name string, c client.Client) BookService {
	return &bookService{
		c:    c,
		name: name,
	}
}

func (c *bookService) GetBookById(ctx context.Context, in *BookIdRequest, opts ...client.CallOption) (*Book, error) {
	req := c.c.NewRequest(c.name, "BookService.GetBookById", in)
	out := new(Book)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookService) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...client.CallOption) (*Book, error) {
	req := c.c.NewRequest(c.name, "BookService.CreateBook", in)
	out := new(Book)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookService) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...client.CallOption) (*Book, error) {
	req := c.c.NewRequest(c.name, "BookService.UpdateBook", in)
	out := new(Book)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookService) DeleteBook(ctx context.Context, in *BookIdRequest, opts ...client.CallOption) (*DeleteBookResponse, error) {
	req := c.c.NewRequest(c.name, "BookService.DeleteBook", in)
	out := new(DeleteBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookService) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...client.CallOption) (*ListBooksResponse, error) {
	req := c.c.NewRequest(c.name, "BookService.ListBooks", in)
	out := new(ListBooksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookService service

type BookServiceHandler interface {
	// Gets a book by its ID.
	GetBookById(context.Context, *BookIdRequest, *Book) error
	// Creates a new book.
	CreateBook(context.Context, *CreateBookRequest, *Book) error
	// Updates an existing book.
	UpdateBook(context.Context, *UpdateBookRequest, *Book) error
	// Deletes a book by its ID.
	DeleteBook(context.Context, *BookIdRequest, *DeleteBookResponse) error
	// Lists all books.
	ListBooks(context.Context, *ListBooksRequest, *ListBooksResponse) error
}

func RegisterBookServiceHandler(s server.Server, hdlr BookServiceHandler, opts ...server.HandlerOption) error {
	type bookService interface {
		GetBookById(ctx context.Context, in *BookIdRequest, out *Book) error
		CreateBook(ctx context.Context, in *CreateBookRequest, out *Book) error
		UpdateBook(ctx context.Context, in *UpdateBookRequest, out *Book) error
		DeleteBook(ctx context.Context, in *BookIdRequest, out *DeleteBookResponse) error
		ListBooks(ctx context.Context, in *ListBooksRequest, out *ListBooksResponse) error
	}
	type BookService struct {
		bookService
	}
	h := &bookServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BookService{h}, opts...))
}

type bookServiceHandler struct {
	BookServiceHandler
}

func (h *bookServiceHandler) GetBookById(ctx context.Context, in *BookIdRequest, out *Book) error {
	return h.BookServiceHandler.GetBookById(ctx, in, out)
}

func (h *bookServiceHandler) CreateBook(ctx context.Context, in *CreateBookRequest, out *Book) error {
	return h.BookServiceHandler.CreateBook(ctx, in, out)
}

func (h *bookServiceHandler) UpdateBook(ctx context.Context, in *UpdateBookRequest, out *Book) error {
	return h.BookServiceHandler.UpdateBook(ctx, in, out)
}

func (h *bookServiceHandler) DeleteBook(ctx context.Context, in *BookIdRequest, out *DeleteBookResponse) error {
	return h.BookServiceHandler.DeleteBook(ctx, in, out)
}

func (h *bookServiceHandler) ListBooks(ctx context.Context, in *ListBooksRequest, out *ListBooksResponse) error {
	return h.BookServiceHandler.ListBooks(ctx, in, out)
}
